#app/scripts/backend/syncPublic.sh -p app/storage/data/public_projects_landscape.tsv -f app/storage/data/patient_id_mapping.tsv -a app/storage/data/landscapeSampleListWithExome.tsv -m -r

OPTIND=1
#project_list_file=""
#patient_mapping_file=""
do_master=0
do_rsync=0
do_load=0
do_tier=0
do_fusion=0
url=https://fr-s-bsg-onc-d.ncifcrf.gov/clinomics_pub/public
dest_dir=/mnt/webrepo/fr-s-bsg-onc-d/htdocs/clinomics_pub
sample_list=""

while [[ "$#" -gt 0 ]]; do case $1 in
  -p|--prj) project_list_file="$2"; shift;;
  -a|--smp) sample_list="$2"; shift;;
  -f|--map) patient_mapping_file="$2"; shift;;
  -u|--url) url="$2"; shift;;
  -d|--des) dest_dir="$2"; shift;;
  -m) do_master=1;;
  -r) do_rsync=1;;
  -l) do_load=1;;
  -t) do_tier=1;;
  -s) do_fusion=1;;
  *) echo "Unknown parameter passed: $1"; exit 1;;
esac; shift; done

if [ -z $project_list_file ]; then
	echo "usage: syncPublic.h "
	echo
	echo "required:"
	echo "-p: project list file"
	echo 
	echo "optional:"
	echo "-f: patient mapping file"
	echo "-a: sample list file"
	echo "-u: URL: default: $url"
	echo "-d: destination dir: default: $dest_dir"
	echo "-m: sync master files"
	echo "-r: sync data files"
	echo "-l: upload variants"
	echo "-t: upload AVIA tiering"
	echo "-s: upload fusion"
	echo
	exit 0
fi

module load oracle
#project_list_file=$1
#patient_mapping_file=$2

projects=`cat $project_list_file | grep . | sed -z 's/\n/,/g;s/,$//'`

echo "Projects: $projects"

source_dir=/mnt/webrepo/fr-s-bsg-onc-d/htdocs/clinomics
data_dir=/mnt/webrepo/fr-s-bsg-onc-d/htdocs/clinomics_dev/app/storage/data

public_cases_file=${project_list_file}_cases.tsv

if [[ $patient_mapping_file ]]; then
	echo "$source_dir/app/scripts/backend/getProjectCases.pl -p $projects -m $patient_mapping_file > $public_cases_file"
	$source_dir/app/scripts/backend/getProjectCases.pl -p $projects -m $patient_mapping_file > $public_cases_file
else
	echo "$source_dir/app/scripts/backend/getProjectCases.pl -p $projects > $public_cases_file"
	$source_dir/app/scripts/backend/getProjectCases.pl -p $projects > $public_cases_file
fi

#clinomics_master_file=$data_home/Sequencing_Tracking_Master_clinomics.txt
#khanlab_master_file=$data_home/Sequencing_Tracking_Master.txt
#projects="RNAseq_Landscape_Manuscript,COG_UK_RMS"
#
#
#public cases file can be generated by the following SQL command:
#
### 1. insert into public_cases table:
#insert into public_cases
#select distinct * from (select distinct patient_id_in_db,case_id_in_db,patient_id_in_paper as newpatient,case_id_in_db as newcase,'processed_DATA', NULL from landscapev21
#union
#select distinct c.patient_id,c.case_id,c.patient_id as newpatient,c.case_id as newcase,'processed_DATA', NULL from project_patients p, cases c 
#where p.project_id=24601 and p.patient_id=c.patient_id) order by newpatient
#
### 2. update case_id if they are duplicated
#update public_cases c1 set case_id_in_paper=patient_id_in_db || '_'  || case_id_in_db where (select count(*) from public_cases c2 
#where c1.patient_id_in_paper=c2.patient_id_in_paper and c1.case_id_in_paper=c2.case_id_in_paper) > 1
#
### 3. update case name:
#update public_cases c1 set case_name=(select case_name from cases c2 where c1.patient_id_in_db=c2.patient_id and c1.case_id_in_db=c2.case_id)
#where exists(select case_name from cases c2 where c1.patient_id_in_db=c2.patient_id and c1.case_id_in_db=c2.case_id)
#
# generate patient mapping
# cut -f1,3  public_cases.tsv | sort | uniq > patient_id_mapping.tsv
#
#

#patient_mapping_file=${data_dir}/patient_id_mapping.tsv

#sample_list=${data_dir}/landscapeSampleListWithExome.tsv
#patient_list=${data_dir}/landscapePatientList.tsv

#sample_list=""
#patient_list=""

khanlab_master_source_file=${data_dir}/Sequencing_Tracking_Master_db.txt
outside_master_source_file=${data_dir}/SequencingMasterFile_OutsidePatients_db.txt
clinomics_master_source_file=${data_dir}/ClinOmics_Sequencing_Master_File_db.txt
khanlab_master_file=${data_dir}/Sequencing_Tracking_Master_db_public.txt
outside_master_file=${data_dir}/SequencingMasterFile_OutsidePatients_db_public.txt
clinomics_master_file=${data_dir}/ClinOmics_Sequencing_Master_File_db_public.txt
tcga_master_file=${data_dir}/TCGAMaster.txt

#echo "python $script_home_dev/extractFromMaster.py $khanlab_master_source_file "'"$projects"'" $khanlab_master_file"
if [ $do_master = "1" ]; then
	echo "python $source_dir/app/scripts/backend/extractFromMaster.py $khanlab_master_source_file $projects $khanlab_master_file $sample_list"
	python $source_dir/app/scripts/backend/extractFromMaster.py $khanlab_master_source_file "$projects" $khanlab_master_file $sample_list
	python $source_dir/app/scripts/backend/extractFromMaster.py $outside_master_source_file "$projects" $outside_master_file $sample_list
	python $source_dir/app/scripts/backend/extractFromMaster.py $clinomics_master_source_file "$projects" $clinomics_master_file $sample_list

	khanlab_modified="1"
	echo "Uploading public database..."
	if [[ $patient_mapping_file ]]; then
		${dest_dir}/app/scripts/backend/syncMaster.pl -u -n public -i $khanlab_master_file,$outside_master_file,$clinomics_master_file -m 1,1,1 -p $patient_mapping_file
	else
		echo "$khanlab_master_file,$outside_master_file,$clinomics_master_file"
		${dest_dir}/app/scripts/backend/syncMaster.pl -u -n public -i $khanlab_master_file,$outside_master_file,$clinomics_master_file -m 1,1,1
	fi
	echo "all done!";
fi

#SQL command:
#
#1. update samples set sample_alias=sample_name
#2. update samples s set sample_alias=(select sampleid__in_paper from landscapev21 l where l.sample_id_in_db=s.sample_id) where exists(select sampleid__in_paper from landscapev21 l where l.sample_id_in_db=s.sample_id)
#3. update sample_case_mapping s1 set case_name=(select sample_alias from samples s2 where s1.sample_id=s2.sample_id)where exists(select * from project_samples s2 where s1.sample_id=s2.sample_id and s2.exp_type='RNAseq' and s2.project_id=25861)

dest_path="processed_DATA"
public_data_home=${dest_dir}/app/storage/ProcessedResults/${dest_path}
processed_data_home=${source_dir}/app/storage/ProcessedResults

if [ $do_rsync = "1" ]; then

	echo "Syncing data..."

	i=1
	total_cases=`wc -l $public_cases_file | cut -f1 -d' '`
	while IFS=$'\t' read -r -a cols
	do
		#if (( $i >= 1000 )); then
		src_patient_id=${cols[0]}
		src_case_id=${cols[1]}
		dest_patient_id=${cols[2]}
		dest_case_id=${cols[3]}
		path=${cols[4]}
		
		
		#if [[ "$src_patient_id" != "$dest_patient_id" ]] || [[ "$src_patient_id" != "$dest_patient_id" ]]; then		
			#rm -rf $public_data_home/$path/$dest_patient_id
		#	echo $i
		#fi
		#rm -rf $public_data_home/$dest_patient_id
		#rm -rf $public_data_home/$src_patient_id

		if [ -d $public_data_home/$path/$dest_patient_id/$dest_case_id ]; then
			dest_case_id=${dest_case_id}_2
		fi
		echo "Syncing ($i/$total_cases) : $path/$src_patient_id/$src_case_id => $path/$dest_patient_id/$dest_case_id"
		mkdir -p $public_data_home/$dest_patient_id/$dest_case_id
		
		#mv $processed_data_home/public_data2/$path/$patient_id/$case_id $processed_data_home/public_data/$path/$patient_id/	
		rsync -ai --exclude "*bam*" --exclude "*calls/*" --exclude "*tsv_*" --exclude "*tophatfusion_out*" --exclude "*exonExp_*" --exclude "*markdup.txt" --exclude "*.log" --exclude "*.tmp.*" --exclude "*.wig.txt" --exclude "*.gz" --exclude "*STAR-fusion*" --exclude "*/TPM*/*.txt" --exclude "*/TPM*/exp.*" --exclude "*cufflinks*" --exclude "*fastqc*" --exclude "*.tdf" --exclude "*.vcf" --exclude "*.vcf.zip" --exclude "*defuse.Reads*" $processed_data_home/$path/$src_patient_id/$src_case_id/ $public_data_home/$dest_patient_id/$dest_case_id
		#rename paitent id to new ones...
		if [[ "$public_data_home/$dest_patient_id/$dest_case_id/${src_patient_id}" != "$public_data_home/$dest_patient_id/$dest_case_id/${dest_patient_id}" ]]; then
			mv $public_data_home/$dest_patient_id/$dest_case_id/${src_patient_id} $public_data_home/$dest_patient_id/$dest_case_id/${dest_patient_id}
		fi
		for fn in $public_data_home/$dest_patient_id/$dest_case_id/*/${src_patient_id}.*;do
			bn=`basename ${fn}`
			newf=${bn#*${src_patient_id}}
			newfull=`dirname ${fn}`/${dest_patient_id}${newf}
			if [[ "$fn" != "$newfull" ]]; then
				mv $fn $newfull
			fi
		done
		for fn in $public_data_home/$dest_patient_id/$dest_case_id/*/db/${src_patient_id}.*;do
			bn=`basename ${fn}`
			newf=${bn#*${src_patient_id}}
			newfull=`dirname ${fn}`/${dest_patient_id}${newf}
			if [[ "$fn" != "$newfull" ]]; then
				mv $fn $newfull
			fi
		done
		# note NB2017(PAMZMG) and NB2022(PAPKWN) need to rename manually because their sample id is the same as patient id
		i=$((i+1))
		#echo $i
	done < $public_cases_file
fi

if [ $do_load = "1" ] || [ $do_tier = "1" ] || [ $do_fusion = "1" ]; then
	i=1
	total_cases=`wc -l $public_cases_file | cut -f1 -d' '`
	while IFS=$'\t' read -r -a cols
	do
		#if (( $i >= 1000 )); then
		src_patient_id=${cols[0]}
		src_case_id=${cols[1]}
		dest_patient_id=${cols[2]}
		dest_case_id=${cols[3]}
		path=${cols[4]}		
		if [ $do_load = "1" ]; then
			echo "Loading ($i/$total_cases) : $path/$src_patient_id/$src_case_id => $path/$dest_patient_id/$dest_case_id"
			$dest_dir/app/scripts/backend/loadVarPatients.pl -i $public_data_home -u $url -p $dest_patient_id -c $dest_case_id -y
		fi
		if [ $do_tier = "1" ]; then
			echo "Loading AVIA Tiering($i/$total_cases) : $path/$src_patient_id/$src_case_id => $path/$dest_patient_id/$dest_case_id"
			$dest_dir/app/scripts/backend/loadVarPatients.pl -i $public_data_home -u $url -p $dest_patient_id -c $dest_case_id -t tier
		fi
		if [ $do_fusion = "1" ]; then
			echo "Loading AVIA Fusion($i/$total_cases) : $path/$src_patient_id/$src_case_id => $path/$dest_patient_id/$dest_case_id"
			$dest_dir/app/scripts/backend/loadVarPatients.pl -i $public_data_home -u $url -p $dest_patient_id -c $dest_case_id -t fusion
		fi
		i=$((i+1))
	done < $public_cases_file
	$dest_dir/app/scripts/backend/updateVarCases.pl
fi

#upload data
#truncate tables:
#truncate table var_samples;
#truncate table var_cases;
#truncate table cases;
#truncate table var_cnv;
#truncate table var_cnv_kit;
#truncate table var_qc;
#./loadVarPatients_hc.pl -i /mnt/webrepo/fr-s-bsg-onc-d/htdocs/onco.data/ProcessedResults/public_data/processed_DATA -u https://fr-s-bsg-onc-d.ncifcrf.gov/clinomics_pub/public
#SQL command after 
#
#1. update var_cases c set case_name=(select case_name from public_cases p where p.patient_id_in_paper=c.patient_id and p.case_id_in_paper=c.case_id) where exists(select case_name from public_cases p where p.patient_id_in_paper=c.patient_id and p.case_id_in_paper=c.case_id)
#2. update cases c set case_name=(select case_name from public_cases p where p.patient_id_in_paper=c.patient_id and p.case_id_in_paper=c.case_id) where exists(select case_name from public_cases p where p.patient_id_in_paper=c.patient_id and p.case_id_in_paper=c.case_id)
#3. (one time) update landscapev21 l set caseid=(select case_id_in_paper from public_cases c where l.patient_id_in_db=c.patient_id_in_db and l.case_id_in_db=c.case_id_in_db)
#4. update sample_cases s set case_id=(select distinct case_id from var_qc c where s.patient_id=c.patient_id and s.sample_id=c.sample_id)
#   update sample_cases s set path=(select path from cases c where s.patient_id=c.patient_id and s.case_id=c.case_id)
#5. update sample_cases s set case_id=(select caseid from landscapev21 l where s.sample_id=l.sample_id_in_db) where exists(select case_id_in_db from landscapev21 l where s.sample_id=l.sample_id_in_db)
#6. delete sample_details where attr_name='patient_id'
#7. delete sample_cases s1 where not exists(select * from landscapev21 l where l.sample_id_in_db=s1.sample_id) and not exists(select * from var_samples s2 where s1.sample_id=s2.sample_id)
#8. delete samples s1 where not exists(select * from landscapev21 l where l.sample_id_in_db=s1.sample_id) and not exists(select * from var_samples s2 where s1.sample_id=s2.sample_id)
# For AVIA tier, please export production data directly:
# Use this command to get all the AVIA tier data:
#
# select CHROMOSOME,START_POS,END_POS,REF,ALT,CASE_ID_IN_PAPER, PATIENT_ID_IN_PAPER,TYPE,SOMATIC_LEVEL,GERMLINE_LEVEL,GENE,MAF,TOTAL_COV,VAF from var_tier_avia v, public_cases c
# where patient_id_in_db=patient_id and case_id_in_db=case_id
#
# Then use sql loader to upload the data to public DB:

#./runSqlldr.sh os_admin/osa0520@//fr-s-oracle-p.ncifcrf.gov:1521/oncopub11p.ncifcrf.gov ../../storage/data/var_tier_avia.tsv ctrl_files/var_tier_avia.ctrl ../../storage/data/var_tier_avia.bad ../../storage/data/var_tier_avia.log
#
# For fusion data, please export production data directly:
#
# create table var_fusion_public as
#select CASE_ID_IN_PAPER,PATIENT_ID_IN_PAPER, LEFT_GENE,RIGHT_GENE,LEFT_CHR,LEFT_POSITION,RIGHT_CHR,RIGHT_POSITION,SAMPLE_ID,TOOL,SPANREADCOUNT,TYPE,VAR_LEVEL    
#from var_fusion, public_cases
#where patient_id_in_db=patient_id and case_id_in_db=case_id
#
#create table var_fusion_dtl_public as select * from var_fusion_dtl d where exists(select * from var_fusion_public f 
#where d.left_gene=f.left_gene and d.left_position=f.left_position and d.left_chr=f.left_chr and
#d.right_gene=f.right_gene and d.right_position=f.right_position and d.right_chr=f.right_chr)
#
# Note if exported fusion_dtl file has two double quote, remove one with : sed -i 's/""/"/g' var_fusion_dtl.tsv
#
# Then use sql loader to upload var_fusion_public and var_fusion_dtl_public
#
# run project data:
# ./preprocessProject_RSEM.pl -p 25861 -t ensembl -l gene -o /mnt/webrepo/fr-s-bsg-onc-d/htdocs/clinomics_pub/app/storage/project_data/25861/ -m /mnt/webrepo/fr-s-bsg-onc-d/htdocs/clinomics_dev/app/storage/data/rpkm_landscape.txt
