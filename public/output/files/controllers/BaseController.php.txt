<?php

/**
 *
 * BaseController is the super class of all controllers.
 *
 * @copyright 2018 Javed Khan's group
 * @author Hsien-chao Chou, Scott Goldweber
 * @package controllers
 */
class BaseController extends Controller {

	/**
	 * Setup the layout used by the controller.
	 *
	 * @return void
	 */
	protected function setupLayout()
	{
		if ( ! is_null($this->layout))
		{
			$this->layout = View::make($this->layout);
		}
	}
	
    protected function getDataTableJson($obj_array, $invisible_columns = []) {		
		$data = array();
		$columns = array();
		$first = true;
		foreach ($obj_array as $obj){			
			$row = array();			
			foreach ((array)$obj as $key=>$value){				
				if (!in_array($key, $invisible_columns)) {
					if ($first) {
						$key_label = Lang::get("messages.$key");
						if ($key_label == "messages.$key") {
							$key_label = ucfirst(str_replace("_", " ", $key));
						}
						$columns[] = array("title" => $key_label);						
					}				
					if ($value == null) $value = '';
					$value = str_replace('¿', 'µ', $value);
					$row[] = "$value";													
				}
			}
			if (count($row) > 0) {
				$data[] = $row;
			}
			if ($first) $first = false;
		}		
		return array("cols" => $columns, "data" => $data);
	}
	
	protected function saveAccessLog($target, $project_id, $type) {		
		$logged_user = User::getCurrentUser();
		if ($logged_user == null)
			return array("code"=>"error","desc"=>"no_user");
		try {
			$access_log = new AccessLog();
			$access_log->target = $target;
			$access_log->project_id = $project_id;
			$access_log->type = $type;
			$access_log->user_id = $logged_user->id;
			$access_log->saveLog();
		} catch (\Exception $e) { 
			return array("code"=>"error","desc"=>$e->getMessage());
		}
		return array("code"=>"ok","desc"=>"");
	}
	

	protected function getColumnJson($table, $invisible_columns) {		
		$key = "$table.columns";
		if (Config::get('onco.cache')) {			
			if (Cache::has($key))
				return Cache::get($key);
		} else {
			//Cache::flush();
		}
		$rows = DB::select("select * from $table where rownum=1");
		$json_cols = array();
		$row = $rows[0];
		foreach ($row as $key=>$value) {
			if (!in_array($key, $invisible_columns)) {
				$key_label = Lang::get("messages.$key");
				if ($key_label == "messages.$key") {
					$key_label = ucfirst(str_replace("_", " ", $key));
				}
				$json_cols[] = array("title" => $key_label);
			}
		}
		if (Config::get('onco.cache')) Cache::put($key, $json_cols, Config::get('onco.cache.mins'));
		return $json_cols;
	}

	protected function getConfig($key) {
		$config = OncoConfig::find($key);
		if ($config) return $config->config_value;
		return null;
	}

	protected function setConfig($key, $value) {
		$config = OncoConfig::find($key);
		if ($config) {
			$config->config_value = $value;
			$config->save();
		} else {
			$config = new OncoConfig();
			$config->config_key = $key;
			$config->config_value = $value;
			$config->save();
		}		
	}

	protected function getUserID() {
		$user_id = null;
		//$user = Session::get('user');
		$user = Sentry::getUser();
		if (isset($user)) {
			$user_id = $user->id;
		}
		return $user_id;

	}

	protected function formatLabel($text) {
		if ($text != "")
			return "<span class='badge'>".$text."</span>";
		else
			return "";
	}

	protected function dataTableToTSV($cols, $data) {
		$headers = array();
		$output = "";
		foreach ($cols as $col) {
			$headers[] = $col["title"]; 
		}
		$output .= implode("\t", $headers)."\n";
		foreach ($data as $row) {
			$output .= implode("\t", $row)."\n";
		}
		return $output;
	}
	
	public function viewHome() {
		$project_count = Project::getCount();
		$patient_count = VarCases::getPatientCount();
		$case_count = VarCases::getCount();
		$user = User::getCurrentUser();
		$user_log = array();
		$top_n = 10;
		if ($user != null) {
			$logs = AccessLog::getUserLog($user->id, "patient");
			foreach ($logs as $log) {
				if (count($user_log) > $top_n)
					break;
				$user_log[$log->target] = '';			
			}
		}
		$user_log = array_keys($user_log);
		$project_list = array();
		$gene_list = array();
		$logs = AccessLog::getProjectCount();
		$cnt = 1;
		foreach ($logs as $log) {
			if ($cnt > $top_n)
				break;
			$project_list[$log->project_id] = $log->name;
			$cnt++;
		}
		$logs = AccessLog::getGeneCount();
		$cnt = 1;
		foreach ($logs as $log) {
			if ($cnt > $top_n)
				break;
			$gene_list[] = $log->target;
			$cnt++;
		}
		$rows = Sample::getSampleCountByExpType();
		$exp_types = array();
		foreach ($rows as $row) {
			$exp_types[] = array("name" => ucwords($row->exp_type), "y" => (int)$row->sample_count);
		}
		$rows = Sample::getSampleCountByTissueCat();
		$tissue_cats = array();
		foreach ($rows as $row) {
			$tissue_cats[] = array("name" => ucwords($row->tissue_cat), "y" => (int)$row->sample_count);
		}
		return View::make('pages/viewHome', ['project_count' => $project_count, 'patient_count' => $patient_count, 'case_count' => $case_count, 'user_log' => $user_log, 'project_list' => $project_list, 'gene_list' => $gene_list, 'exp_types' => $exp_types, 'tissue_cats' => $tissue_cats]);
	}
}

